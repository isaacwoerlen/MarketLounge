```python
# apps/language/tests/factories.py
import factory
from factory.django import DjangoModelFactory
from language.models import Language, TranslatableKey, Translation, TranslationJob

class LanguageFactory(DjangoModelFactory):
    class Meta:
        model = Language

    code = factory.Sequence(lambda n: f'lang-{n}')
    name = factory.Faker('word')
    is_active = True
    is_default = False
    priority = 5  # Champ ajout√© pour ordonnancement des traductions

class TranslatableKeyFactory(DjangoModelFactory):
    class Meta:
        model = TranslatableKey

    scope = factory.Faker('word')
    key = factory.Sequence(lambda n: f'key-{n}')
    checksum = factory.Faker('sha256')
    is_blocking = False
    prompt_template = factory.Dict({'tone': 'formal', 'max_length': 100})  # Pour LLM_ai
    tenant_id = factory.Faker('uuid4')  # Pour multi-tenancy

class TranslationFactory(DjangoModelFactory):
    class Meta:
        model = Translation

    key = factory.SubFactory(TranslatableKeyFactory)
    language = factory.SubFactory(LanguageFactory)
    text = factory.Faker('sentence')
    version = 1
    alerts = factory.List([
        factory.Dict({'type': factory.Faker('word'), 'message': factory.Faker('sentence')})
    ])
    reviewer = factory.Faker('name', locale='en_US')
    embedding = factory.LazyFunction(lambda: b'mocked_vector')  # Simule faiss_pgvector

class TranslationJobFactory(DjangoModelFactory):
    class Meta:
        model = TranslationJob

    name = factory.Faker('word')
    state = 'queued'
    source_locale = 'en'
    target_locales = factory.List(['fr', 'de'])
    scope_filter = factory.List(['homepage', 'product'])
    stats = factory.Dict({'total': 100, 'translated': 80, 'missing': 20})
    errors = factory.List([])
```