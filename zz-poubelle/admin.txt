# apps/language/admin.py
from django.contrib import admin, messages
from django.db import transaction
from .models import Language
from apps.language.tasks import translate_glossary_nodes

@admin.register(Language)
class LanguageAdmin(admin.ModelAdmin):
    list_display = ("name", "code", "is_active", "is_default")
    list_filter = ("is_active", "is_default")
    search_fields = ("name", "code")
    ordering = ("name",)
    actions = ("make_default", "activate", "deactivate")

    class Media:
        js = ("language/language_admin.js",)
        css = {"all": ("language/language_admin.css",)}

    @admin.action(description="‚≠ê D√©finir comme langue par d√©faut")
    def make_default(self, request, queryset):
        count = queryset.count()
        if count != 1:
            self.message_user(
                request,
                "S√©lectionnez exactement une seule langue pour la d√©finir par d√©faut.",
                level=messages.WARNING,
            )
            return
        obj = queryset.first()
        with transaction.atomic():
            # Retire le statut 'par d√©faut' des autres
            Language.objects.exclude(pk=obj.pk).update(is_default=False)
            # Force cette langue active + par d√©faut (en .save() pour invalider le cache)
            if not obj.is_active:
                obj.is_active = True
            obj.is_default = True
            obj.save()
        self.message_user(
            request, f"¬´ {obj.name} ¬ª est maintenant la langue par d√©faut.", level=messages.SUCCESS
        )

    @admin.action(description="‚úÖ Activer")
    def activate(self, request, queryset):
        updated = 0
        for obj in queryset:
            if not obj.is_active:
                obj.is_active = True
                obj.save()
                updated += 1
        self.message_user(request, f"{updated} langue(s) activ√©e(s).", level=messages.SUCCESS)

    @admin.action(description="üö´ D√©sactiver")
    def deactivate(self, request, queryset):
        # On bloque la d√©sactivation de la langue par d√©faut
        defaults = queryset.filter(is_default=True)
        if defaults.exists():
            self.message_user(
                request,
                "Impossible de d√©sactiver la langue par d√©faut. D√©finissez d‚Äôabord une autre langue comme par d√©faut.",
                level=messages.ERROR,
            )
            return
        updated = 0
        for obj in queryset:
            if obj.is_active:
                obj.is_active = False
                obj.save()
                updated += 1
        self.message_user(request, f"{updated} langue(s) d√©sactiv√©e(s).", level=messages.SUCCESS)

    # Emp√™che de supprimer la langue par d√©faut
    def delete_model(self, request, obj):
        if obj.is_default:
            self.message_user(
                request,
                "Impossible de supprimer la langue par d√©faut. D√©finissez d‚Äôabord une autre langue par d√©faut.",
                level=messages.ERROR,
            )
            return
        return super().delete_model(request, obj)

    def delete_queryset(self, request, queryset):
        if queryset.filter(is_default=True).exists():
            self.message_user(
                request,
                "Impossible de supprimer la langue par d√©faut dans une suppression multiple.",
                level=messages.ERROR,
            )
            # On supprime seulement les non-d√©faut
            queryset = queryset.exclude(is_default=True)
        return super().delete_queryset(request, queryset)

@admin.register(GlossaryNode)
class GlossaryNodeAdmin(admin.ModelAdmin):
    # ...
    actions = ("action_translate_missing", "action_trigger_ia", "action_sync_faiss", "action_mark_reviewed")

    @admin.action(description="üåê Traduire (IA) les langues manquantes")
    def action_translate_missing(self, request, queryset):
        gids = list(queryset.values_list("glossary_id", flat=True))
        if not gids:
            self.message_user(request, "Aucun n≈ìud s√©lectionn√©.", level=messages.WARNING)
            return
        translate_glossary_nodes.delay(gids)  # source = langue par d√©faut
        self.message_user(request, f"Traduction IA lanc√©e pour {len(gids)} n≈ìud(s).", level=messages.SUCCESS)
